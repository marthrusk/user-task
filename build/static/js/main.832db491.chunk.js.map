{"version":3,"sources":["serviceWorker.ts","components/Layout.tsx","components/ComponentBase.tsx","components/ViewBase.tsx","configuration.tsx","services/dataService.tsx","routes.tsx","App.tsx","ApplicationCore.tsx","components/shared/Grid/GridHeader.tsx","components/shared/Grid/GridBody.tsx","components/shared/Grid/Grid.tsx","components/marketplace/marketplaceList.tsx","components/ListBase.tsx","components/Views/MarketplaceListView.tsx","components/marketplace/marketplaceDetail.tsx","components/DetailBase.tsx","components/Views/MarketplaceDetailView.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Layout","props","react","children","ComponentBase","_React$Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","buildState","inherits","createClass","key","value","newValues","callback","setState","prevState","assign","React","ViewBase","_ComponentBase","search","renderBody","get","getParametersFromProps","Configuration","API","HttpStatusCode","OK","Error","DataService","_BaseDataService","apply","arguments","controller","path","fetch","createUrl","createRequestOption","then","response","processResponse","id","_this2","baseUrl","method","body","header","headers","createDefaultHeader","Accept","Content-Type","controllerName","length","undefined","status","json","alert","routePath","Layout_Layout","react_router_dom","react_router","exact","component","MarketplaceListView","to","history","createBrowserHistory","ApplicationCore","_dataService","_instance","instance","bootClientHistory","GridHeader","className","colGroup","renderGridHeader","columns","map","cell","index","field","label","GridBody","data","renderNoDataRow","renderGridRow","row","renderGridCell","column","renderer","item","getRowCellValue","segments","split","forEach","x","Grid","renderColGroup","updateState","width","concat","GridHeader_GridHeader","GridBody_GridBody","MarketplaceList","_ListBase","args","renderActionColumn","onClick","goToDetail","ListBase","_getPrototypeOf2","_len","Array","_key","push","getDetailUrl","objectSpread","esm_get","prototype","dataService","read","controllerApi","controllerPath","catch","error","console","log","Grid_Grid","getColumns","_ViewBase","marketplaceList_MarketplaceList","MarketplaceDetail","_DetailBase","DetailBase","detail","readDetail","MarketplaceDetailView","marketplaceDetail_MarketplaceDetail","parameters","__webpack_require__","d","__webpack_exports__","src_routePath","marketplaceDetail","marketplaceList","ReactDOM","render","react_default","a","createElement","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZC,IAAMC,EAAS,SAACC,GACtB,OAAOC,EAAA,yBACLD,EAAME,8DCCIC,EAAb,SAAAC,GAIC,SAAAD,EAAmBH,GAAe,IAAAK,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjCE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMR,KAEDY,MAAQP,EAAKQ,aAHeR,EAJnC,OAAAC,OAAAQ,EAAA,EAAAR,CAAAH,EAAAC,GAAAE,OAAAS,EAAA,EAAAT,CAAAH,EAAA,EAAAa,IAAA,aAAAC,MAAA,WAWE,MAAO,KAXT,CAAAD,IAAA,cAAAC,MAAA,SAcmDC,EAAgCC,GACjFX,KAAKY,SAAS,SAAAC,GAAe,OAAOf,OAAOgB,OAAOhB,OAAOgB,OAAO,GAAID,GAAYH,IAAeC,OAfjGhB,EAAA,CAGWoB,aCIEC,EAAb,SAAAC,GAKC,SAAAD,EAAmBxB,GAAe,IAAAK,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgB,IACjCnB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkB,GAAAb,KAAAH,KAAMR,KACDY,MAAQP,EAAKQ,aAFeR,EALnC,OAAAC,OAAAQ,EAAA,EAAAR,CAAAkB,EAAAC,GAAAnB,OAAAS,EAAA,EAAAT,CAAAkB,EAAA,EAAAR,IAAA,yBAAAC,MAAA,SAckCjB,GAGhC,OAFaA,EAAMJ,SAAS8B,SAf9B,CAAAV,IAAA,aAAAC,MAAA,WAsBE,OAAO,OAtBT,CAAAD,IAAA,SAAAC,MAAA,WA0BE,OAAOT,KAAKmB,eA1Bd,CAAAX,IAAA,aAAAY,IAAA,WAWE,OAAOpB,KAAKqB,uBAAuBrB,KAAKR,WAX1CwB,EAAA,CAIWrB,mBCpBE2B,EAAgB,CAC5BC,IAAK,0BCCAC,sCACEC,GAAK,IADPD,EAEEE,MAAQ,QA2CHC,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAA7B,OAAAC,EAAA,EAAAD,CAAAE,KAAA2B,GAAA7B,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6B,GAAAE,MAAA7B,KAAA8B,YAAA,OAAAhC,OAAAQ,EAAA,EAAAR,CAAA6B,EAAAC,GAAA9B,OAAAS,EAAA,EAAAT,CAAA6B,EAAA,EAAAnB,IAAA,OAAAC,MAAA,SACMsB,EAAoBC,GAAe,IAAAnC,EAAAG,KACvC,OAAOiC,MAAMjC,KAAKkC,UAAUH,EAAYC,GAAOhC,KAAKmC,oBAAoB,QACtEC,KAAK,SAACC,GAAD,OAAwBxC,EAAKyC,gBAAgBD,OAHtD,CAAA7B,IAAA,aAAAC,MAAA,SAMYsB,EAAoBQ,EAAYP,GAAe,IAAAQ,EAAAxC,KACzD,OAAOiC,MAAMjC,KAAKkC,UAAUH,EAAYC,GAAOhC,KAAKmC,oBAAoB,QACtEC,KAAK,SAACC,GAAD,OAAwBG,EAAKF,gBAAgBD,SARtDV,EAAA,kDAtCWc,QAAkBnB,EAAcC,oEAEZmB,EAAgBC,EAAiBC,GAC9D,MAAO,CACNF,SACAG,QAASD,GAAU5C,KAAK8C,sBACxBH,KAAMA,iDAKP,MAAO,CAENI,OAAU,mBACVC,eAAgB,sDAIEC,GAAmD,IAA3BjB,EAA2BF,UAAAoB,OAAA,QAAAC,IAAArB,UAAA,GAAAA,UAAA,GAAZ,GAC1D,OAAO9B,KAAKyC,QAAUQ,GAAkBjB,EAAO,IAAMA,EAAO,4CAGnCK,GACzB,IAAMe,EAASf,EAASe,OACxB,GAAIA,IAAW5B,EAAeC,GAC7B,OAAOY,EAASgB,OACND,IAAW5B,EAAeE,OAEpC4B,MAAM,uBC/BIC,SAKK,eAyBjB9D,EAAA,cAAC+D,EAAD,KACC/D,EAAA,cAACgE,EAAA,EAAD,KACChE,EAAA,cAACiE,EAAA,EAAD,KACCjE,EAAA,cAACiE,EAAA,EAAD,CAAOC,OAAK,EAAC3B,KAAMuB,EAA2BK,UAAWC,IAEzDpE,EAAA,cAACiE,EAAA,EAAD,CAAUI,GAAIP,OANX,WC7BMQ,EAAUC,cCFVC,EAAb,WAIC,SAAAA,IAAenE,OAAAC,EAAA,EAAAD,CAAAE,KAAAiE,GAAAjE,KAFfkE,kBAEc,EACblE,KAAKkE,aAAe,IAAIvC,EAL1B,OAAA7B,OAAAS,EAAA,EAAAT,CAAAmE,EAAA,OAAAzD,IAAA,WAAAY,IAAA,WAYE,OAHK6C,EAAgBE,YACpBF,EAAgBE,UAAY,IAAIF,GAE1BA,EAAgBE,YAZzB,CAAA3D,IAAA,cAAAY,IAAA,WAgBE,OAAO6C,EAAgBG,SAASF,eAhBlC,CAAA1D,IAAA,UAAAY,IAAA,WAoBE,OAAOiD,MApBTJ,EAAA,GAAaA,EACLE,iBCGD,IAAMG,EAAa,SAAC9E,GAC1B,OAAOC,EAAA,qBAAK8E,UAAU,kCACrB9E,EAAA,2BACCA,EAAA,8BACED,EAAMgF,UAER/E,EAAA,uBAAO8E,UAAU,wBAChB9E,EAAA,oBAAIC,SAAU+E,EAAiBjF,SAM7BiF,EAAmB,SAACjF,GACzB,OAAOA,EAAMkF,QAAQC,IAAI,SAACC,EAAKC,GAAN,OAAgBpF,EAAA,oBAAIe,IAAKoE,EAAKE,MAAQD,GAAQD,EAAKG,UCbhEC,EAAW,SAACxF,GACxB,OAAKA,EAAMyF,MAAQzF,EAAMyF,MAA8B,IAAtBzF,EAAMyF,KAAK/B,OACpCgC,IAGDzF,EAAA,qBAAK8E,UAAU,kCACrB9E,EAAA,2BACCA,EAAA,8BACED,EAAMgF,UAER/E,EAAA,uBAAO8E,UAAU,yBAEd/E,EAAMyF,MACHzF,EAAMyF,MAA8B,IAAtBzF,EAAMyF,KAAK/B,OAC1BgC,IACAC,EAAc3F,OAOhB2F,EAAgB,SAAC3F,GACtB,OAAOA,EAAMyF,KAAKN,IAAI,SAACS,EAAKP,GAAN,OAAgBpF,EAAA,oBAAIe,IAAKqE,GAAQQ,EAAe7F,EAAO4F,OAGxEC,EAAiB,SAAC7F,EAAsB4F,GAC7C,OAAO5F,EAAMkF,QAAQC,IAAI,SAACW,EAAQT,GACjC,OAAKS,EAAOC,SAOL9F,EAAA,wBAAK6F,EAAOC,SAAS,CAAEC,KAAMJ,KAN5B3F,EAAA,oBAAIe,IAAK8E,EAAOR,MAAQD,GAC9BpF,EAAA,0BACEgG,EAAgBH,EAAQF,QAQxBK,EAAkB,SAACH,EAA0BF,GAClD,IAAMM,EAAWJ,GAAUA,EAAOR,MAAMa,MAAM,KAC9C,GAAID,EAAU,CACb,IAAIjF,EAAQ2E,EAIZ,OAHAM,EAASE,QAAQ,SAAAC,GAChBpF,EAAQA,EAAMoF,KAERpF,EAER,OAAO2E,EAAIE,EAAOR,QAIbI,EAAkB,WACvB,OAAOzF,EAAA,oBAAI8E,UAAU,yCAAd,YCtCKuB,EAAb,SAAA7E,GAAA,SAAA6E,IAAA,OAAAhG,OAAAC,EAAA,EAAAD,CAAAE,KAAA8F,GAAAhG,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgG,GAAAjE,MAAA7B,KAAA8B,YAAA,OAAAhC,OAAAQ,EAAA,EAAAR,CAAAgG,EAAA7E,GAAAnB,OAAAS,EAAA,EAAAT,CAAAgG,EAAA,EAAAtF,IAAA,oBAAAC,MAAA,WAGE,IAAM+D,EAAWxE,KAAK+F,iBACtB/F,KAAKgG,YAAY,CAChBxB,eALH,CAAAhE,IAAA,iBAAAC,MAAA,WASkD,IAAAZ,EAAAG,KAChD,OAAOA,KAAKR,MAAMkF,QAAQC,IAAI,SAAAkB,GAAC,OAAIpG,EAAA,qBAAKwG,MAAK,GAAAC,OAAK,IAAMrG,EAAKL,MAAMkF,QAAQxB,OAA9B,WAV/C,CAAA1C,IAAA,SAAAC,MAAA,WAcE,OAAOhB,EAAA,qBAAK8E,UAAU,WACrB9E,EAAA,cAAC0G,EAAD,CAAYzB,QAAS1E,KAAKR,MAAMkF,QAC/BF,SAAUxE,KAAKI,MAAMoE,WACtB/E,EAAA,cAAC2G,EAAD,CAAU1B,QAAS1E,KAAKR,MAAMkF,QAC7BF,SAAUxE,KAAKI,MAAMoE,SACrBS,KAAMjF,KAAKR,MAAMyF,YAnBrBa,EAAA,CAA0BnG,GCXb0G,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAvG,OAAAC,EAAA,EAAAD,CAAAE,KAAAqG,GAAAvG,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuG,GAAAxE,MAAA7B,KAAA8B,YAAA,OAAAhC,OAAAQ,EAAA,EAAAR,CAAAuG,EAAAC,GAAAxG,OAAAS,EAAA,EAAAT,CAAAuG,EAAA,EAAA7F,IAAA,aAAAC,MAAA,WACiD,IAAAZ,EAAAG,KAC/C,MAAO,CACN,CACC+E,MAAO,SACPD,MAAO,GACPS,SAAU,SAACgB,GACV,OAAO1G,EAAK2G,mBAAmBD,EAAKf,QAGtC,CACCT,MAAO,OACPD,MAAO,QAER,CACCC,MAAO,QACPD,MAAO,YAhBX,CAAAtE,IAAA,eAAAC,MAAA,SAqBwB8B,GACtB,MNNM,KMhBR,CAAA/B,IAAA,qBAAAC,MAAA,SAyB8B+E,GAAmC,IAAAhD,EAAAxC,KAC/D,OAAOP,EAAA,wBAAQgH,QAAS,kBAAMjE,EAAKkE,WAAWlB,EAAKjD,MAA5C,YA1BT,CAAA/B,IAAA,gBAAAC,MAAA,WA8BE,MAAO,UA9BT,CAAAD,IAAA,iBAAAC,MAAA,WAkCE,MAAO,kBAlCT4F,EAAA,CCEA,SAAApF,GAAA,SAAA0F,IAAA,IAAAC,EAAA/G,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2G,GAAA,QAAAE,EAAA/E,UAAAoB,OAAAqD,EAAA,IAAAO,MAAAD,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAR,EAAAQ,GAAAjF,UAAAiF,GAAA,OAAAlH,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,MAAA4G,EAAA9G,OAAAI,EAAA,EAAAJ,CAAA6G,IAAAxG,KAAA0B,MAAA+E,EAAA,CAAA5G,MAAAkG,OAAAK,MAmBWG,WAAa,SAACnE,GACvB1C,EAAKL,MAAMuE,QAAQiD,KAAKnH,EAAKoH,aAAa1E,KApB5C1C,EAAA,OAAAC,OAAAQ,EAAA,EAAAR,CAAA6G,EAAA1F,GAAAnB,OAAAS,EAAA,EAAAT,CAAA6G,EAAA,EAAAnG,IAAA,aAAAC,MAAA,WAOE,OAAOX,OAAAoH,EAAA,EAAApH,CAAA,GAAAA,OAAAqH,EAAA,EAAArH,QAAAI,EAAA,EAAAJ,CAAA6G,EAAAS,WAAA,aAAApH,MAAAG,KAAAH,MAAA,CAENiF,KAAM,IAAI6B,MACVpC,QAAS,IAAIoC,UAVhB,CAAAtG,IAAA,eAAAC,MAAA,SAewB8B,GACtB,MAAM,IAAIb,MAAM,8CAhBlB,CAAAlB,IAAA,aAAAC,MAAA,WAyBE,MAAM,IAAIiB,MAAM,4CAzBlB,CAAAlB,IAAA,gBAAAC,MAAA,WA6BE,MAAM,IAAIiB,MAAM,+CA7BlB,CAAAlB,IAAA,iBAAAC,MAAA,WAiCE,MAAO,KAjCT,CAAAD,IAAA,oBAAAC,MAAA,WAoC4B,IAAA+B,EAAAxC,KAC1BiE,EAAgBoD,YAAYC,KAAKtH,KAAKuH,gBAAiBvH,KAAKwH,kBAC1DpF,KAAK,SAAA6C,GAAI,OAAIzC,EAAKwD,YAAY,CAAEf,WAChCwC,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,OAvC/B,CAAAlH,IAAA,aAAAC,MAAA,WA2CE,OAAOhB,EAAA,cAACoI,EAAD,CAAM5C,KAAMjF,KAAKI,MAAM6E,KAC7BP,QAAS1E,KAAK8H,iBA5CjB,CAAAtH,IAAA,SAAAC,MAAA,WAgDE,OAAOT,KAAKmB,iBAhDdwF,EAAA,CAIWhH,ICFEkE,EAAb,SAAAkE,GAAA,SAAAlE,IAAA,OAAA/D,OAAAC,EAAA,EAAAD,CAAAE,KAAA6D,GAAA/D,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+D,GAAAhC,MAAA7B,KAAA8B,YAAA,OAAAhC,OAAAQ,EAAA,EAAAR,CAAA+D,EAAAkE,GAAAjI,OAAAS,EAAA,EAAAT,CAAA+D,EAAA,EAAArD,IAAA,aAAAC,MAAA,WAIE,OAAOhB,EAAA,cAACuI,EAAD,CAAiBjE,QAAS/D,KAAKR,MAAMuE,YAJ9C,CAAAvD,IAAA,SAAAC,MAAA,WAQE,OAAOT,KAAKmB,iBARd0C,EAAA,CAAyC7C,GCJ5BiH,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAnI,OAAAC,EAAA,EAAAD,CAAAE,KAAAiI,GAAAnI,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmI,GAAApG,MAAA7B,KAAA8B,YAAA,OAAAhC,OAAAQ,EAAA,EAAAR,CAAAmI,EAAAC,GAAApI,OAAAS,EAAA,EAAAT,CAAAmI,EAAA,EAAAzH,IAAA,gBAAAC,MAAA,WAGE,MAAO,UAHT,CAAAD,IAAA,iBAAAC,MAAA,WAOE,MAAO,kBAPTwH,EAAA,CCCA,SAAAhH,GAAA,SAAAkH,IAAA,OAAArI,OAAAC,EAAA,EAAAD,CAAAE,KAAAmI,GAAArI,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqI,GAAAtG,MAAA7B,KAAA8B,YAAA,OAAAhC,OAAAQ,EAAA,EAAAR,CAAAqI,EAAAlH,GAAAnB,OAAAS,EAAA,EAAAT,CAAAqI,EAAA,EAAA3H,IAAA,aAAAC,MAAA,WAOE,OAAOX,OAAAoH,EAAA,EAAApH,CAAA,GAAAA,OAAAqH,EAAA,EAAArH,QAAAI,EAAA,EAAAJ,CAAAqI,EAAAf,WAAA,aAAApH,MAAAG,KAAAH,MAAA,CAENoI,OAAQ,GACR1D,QAAS,IAAIoC,UAVhB,CAAAtG,IAAA,gBAAAC,MAAA,WAgBE,MAAM,IAAIiB,MAAM,+CAhBlB,CAAAlB,IAAA,iBAAAC,MAAA,WAoBE,MAAO,KApBT,CAAAD,IAAA,oBAAAC,MAAA,WAuB4B,IAAAZ,EAAAG,KAC1BiE,EAAgBoD,YAAYgB,WAAWrI,KAAKuH,gBAAiBvH,KAAKR,MAAM+C,GAAIvC,KAAKwH,kBAC/EpF,KAAK,SAAA6C,GAAI,OAAIpF,EAAKmG,YAAY,CAAEoC,OAAQnD,MACxCwC,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,OA1B/B,CAAAlH,IAAA,aAAAC,MAAA,WA8BE,OAAO,OA9BT,CAAAD,IAAA,SAAAC,MAAA,WAkCE,OAAOT,KAAKmB,iBAlCdgH,EAAA,CAIWxI,ICFE2I,EAAb,SAAAP,GAAA,SAAAO,IAAA,OAAAxI,OAAAC,EAAA,EAAAD,CAAAE,KAAAsI,GAAAxI,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwI,GAAAzG,MAAA7B,KAAA8B,YAAA,OAAAhC,OAAAQ,EAAA,EAAAR,CAAAwI,EAAAP,GAAAjI,OAAAS,EAAA,EAAAT,CAAAwI,EAAA,EAAA9H,IAAA,aAAAC,MAAA,WAIE,OAAOhB,EAAA,cAAC8I,EAAD,CAAmBhG,GAAIvC,KAAKwI,WAAWjG,OAJhD,CAAA/B,IAAA,SAAAC,MAAA,WASE,OAAOT,KAAKmB,iBATdmH,EAAA,CAA2CtH,GChB3CyH,EAAAC,EAAAC,EAAA,8BAAAC,IAUO,IAAMrF,EAGT,CACHsF,kBAAmB,kBACnBC,gBAAiB,eAGlBC,IAASC,OAAOC,EAAAC,EAAAC,cAAC3F,EAAD,KACfyF,EAAAC,EAAAC,cAAC1F,EAAA,EAAD,KACCwF,EAAAC,EAAAC,cAACzF,EAAA,EAAD,KACCuF,EAAAC,EAAAC,cAACzF,EAAA,EAAD,CAAOC,OAAK,EAAC3B,KAAMuB,EAAUuF,gBAAiBlF,UAAWC,IACzDoF,EAAAC,EAAAC,cAACzF,EAAA,EAAD,CAAOC,OAAK,EAAC3B,KAAMuB,EAAUsF,kBAAmBjF,UAAW0E,IAC3DW,EAAAC,EAAAC,cAACzF,EAAA,EAAD,CAAUI,GAAIP,EAAUuF,qBAGhBM,SAASC,eAAe,SlB+G7B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpH,KAAK,SAAAqH,GACjCA,EAAaC","file":"static/js/main.832db491.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from \"react\";\r\n\r\ninterface Props {\r\n\tchildren: React.ReactNode;\r\n}\r\n\r\nexport const Layout = (props: Props) => {\r\n\treturn <div>\r\n\t\t{props.children}\r\n\t</div>;\r\n}","import * as React from \"react\";\r\n\r\nexport interface ComponentBaseProps {\r\n}\r\n\r\nexport interface ComponentBaseState {\r\n\r\n}\r\n\r\nexport class ComponentBase<\r\n\tTProps extends ComponentBaseProps = ComponentBaseProps,\r\n\tTState extends ComponentBaseState = ComponentBaseState\r\n\t> extends React.Component<TProps, TState> {\r\n\tpublic constructor(props: TProps) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = this.buildState() as TState;\r\n\t}\r\n\r\n\tprotected buildState(): ComponentBaseState {\r\n\t\treturn { };\r\n\t}\r\n\r\n\tprotected updateState<TKeys extends keyof TState>(newValues: Pick<TState, TKeys>, callback?: () => void) {\r\n\t\tthis.setState(prevState => { return Object.assign(Object.assign({}, prevState), newValues); }, callback);\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport { ComponentBase, ComponentBaseProps, ComponentBaseState } from \"./ComponentBase\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\n\r\nexport interface ViewBaseProps extends ComponentBaseProps, RouteComponentProps<{}>  {\r\n\r\n}\r\n\r\nexport interface IRoutingParams {\r\n\r\n}\r\n\r\nexport interface ViewBaseState extends ComponentBaseState{\r\n\r\n}\r\n\r\nexport class ViewBase<\r\n\tTProps extends ViewBaseProps = ViewBaseProps,\r\n\tTState extends ViewBaseState = ViewBaseState,\r\n\tTParams extends IRoutingParams = IRoutingParams\r\n\t> extends ComponentBase<TProps, TState> {\r\n\tpublic constructor(props: TProps) {\r\n\t\tsuper(props);\r\n\t\tthis.state = this.buildState() as TState;\r\n\t}\r\n\r\n\tprotected get parameters(): TParams {\r\n\t\treturn this.getParametersFromProps(this.props);\r\n\t}\r\n\r\n\tprotected getParametersFromProps(props: ViewBaseProps) {\r\n\t\tconst test = props.location.search;\r\n\t\tdebugger;\r\n\t\treturn test as any;\r\n\t\t//return queryString.parse(props.location.search) as TParams;\r\n\t}\r\n\r\n\tprotected renderBody(): React.ReactNode {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tpublic render(): React.ReactNode {\r\n\t\treturn this.renderBody();\r\n\t}\r\n}\r\n","export const Configuration = {\r\n\tAPI: \" https://api.zonky.cz/\"\r\n};","import { Configuration } from '../configuration';\r\n\r\nclass HttpStatusCode {\r\n\tstatic OK = 200;\r\n\tstatic Error = 500;\r\n}\r\n\r\nclass BaseDataService {\r\n\t//probably some environments variables\r\n\tprotected baseUrl: string = Configuration.API;\r\n\r\n\tprotected createRequestOption(method: string, body?: BodyInit, header?: HeadersInit): RequestInit {\r\n\t\treturn {\r\n\t\t\tmethod,\r\n\t\t\theaders: header || this.createDefaultHeader(),\r\n\t\t\tbody: body,\r\n\t\t};\r\n\t}\r\n\t\r\n\tprotected createDefaultHeader(): HeadersInit {\r\n\t\treturn {\r\n\t\t\t//'Access-Control-Allow-Origin': '*',\r\n\t\t\t'Accept': 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t};\r\n\t}\r\n\r\n\tprotected createUrl(controllerName: string, path: string = \"\"): string {\r\n\t\treturn this.baseUrl + controllerName + (path ? \"/\" + path : \"\");\r\n\t}\r\n\r\n\tprotected processResponse(response: Response) {\r\n\t\tconst status = response.status;\r\n\t\tif (status === HttpStatusCode.OK) {\r\n\t\t\treturn response.json();\r\n\t\t} else if (status === HttpStatusCode.Error) {\r\n\t\t\t//some logger, for now just alert\r\n\t\t\talert(\"CHYBA 500\");\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport interface IDataService {\r\n\tread(controller: string, path?: string): Promise<any>;\r\n\treadDetail(controller: string, id: number, path?: string): Promise<any>;\r\n};\r\n\r\nexport class DataService extends BaseDataService {\r\n\tread(controller: string, path?: string) {\r\n\t\treturn fetch(this.createUrl(controller, path), this.createRequestOption('GET'))\r\n\t\t\t.then((response: Response) => this.processResponse(response));\r\n\t}\r\n\r\n\treadDetail(controller: string, id: number, path?: string) {\r\n\t\treturn fetch(this.createUrl(controller, path), this.createRequestOption('GET'))\r\n\t\t\t.then((response: Response) => this.processResponse(response));\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport { Layout } from \"./components/Layout\";\r\nimport { Switch, Route, BrowserRouter, Redirect } from \"react-router-dom\";\r\nimport { MarketplaceListView } from \"./components/Views/MarketplaceListView\";\r\n//import { MarketplaceDetailView, MarketplaceDetailRoutingParams } from \"./components/Views/MarketPlaceDetailView\";\r\n\r\nexport const routePath: {\r\n\tmarketplaceDetail: string;\r\n\tmarketplaceList: string;\r\n} = {\r\n\tmarketplaceDetail: \"marketplace/:id\",\r\n\tmarketplaceList: \"marketplace\"\r\n}\r\n\r\n//function getFullUrl<TParams>(baseUrl: string, parameters?: TParams): string {\r\n//\tlet result: string = baseUrl;\r\n\r\n//\tif (parameters) {\r\n//\t\tObject.getOwnPropertyNames(parameters).forEach((name, index) => {\r\n//\t\t\tif (parameters[name] != undefined) {\r\n//\t\t\t\tresult += (index === 0 ? \"?\" : \"&\") + name + \"=\" + encodeURIComponent(parameters[name]);\r\n//\t\t\t}\r\n//\t\t});\r\n//\t}\r\n\r\n//\treturn result;\r\n//}\r\n\r\nexport function getMarketDetailUrl(id: number): string {\r\n\treturn \"\";\r\n\t//return getFullUrl<MarketplaceDetailRoutingParams>(routePath.marketplaceDetail, {\r\n\t//\tid: id,\r\n\t//});\r\n}\r\n\r\nexport const routes: JSX.Element =\r\n\t<Layout>\r\n\t\t<BrowserRouter>\r\n\t\t\t<Switch>\r\n\t\t\t\t<Route exact path={routePath.marketplaceList} component={MarketplaceListView} />\r\n\t\t\t\t\r\n\t\t\t\t<Redirect to={routePath.marketplaceList} />\r\n\t\t\t</Switch>\r\n\t\t</BrowserRouter>\r\n\t</Layout>","import * as React from 'react';\nimport './App.css';\r\nimport { routes } from './routes';\r\nimport { createBrowserHistory } from 'history';\r\n\r\n// Create browser history\r\nexport const history = createBrowserHistory();\n\nconst App: React.FC = () => {\n\tlet routeViews: React.ReactNode = routes;\n\treturn <div className=\"App\" children={routeViews}/>;\n}\n\nexport default App;\n","import { DataService, IDataService } from \"./services/dataService\";\r\nimport { history as bootClientHistory } from \"./App\";\r\nimport { History } from \"history\";\r\n\r\nexport class ApplicationCore {\r\n\tstatic _instance: ApplicationCore;\r\n\t_dataService: IDataService;\r\n\r\n\tconstructor() {\r\n\t\tthis._dataService = new DataService();\r\n\t}\r\n\r\n\tstatic get instance(): ApplicationCore {\r\n\t\tif (!ApplicationCore._instance) {\r\n\t\t\tApplicationCore._instance = new ApplicationCore();\r\n\t\t}\r\n\t\treturn ApplicationCore._instance;\r\n\t}\r\n\r\n\tstatic get dataService(): IDataService {\r\n\t\treturn ApplicationCore.instance._dataService;\r\n\t}\r\n\r\n\tpublic static get history(): History {\r\n\t\treturn bootClientHistory;\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport { IDataTableColumn } from \"./Grid\";\r\n\r\nexport interface GridHeaderProps {\r\n\tcolGroup: Array<React.ReactNode>;\r\n\tcolumns: Array<IDataTableColumn>;\r\n}\r\n\r\nexport const GridHeader = (props: GridHeaderProps): JSX.Element => {\r\n\treturn <div className=\"h-table h-table-head-container\">\r\n\t\t<table>\r\n\t\t\t<colgroup>\r\n\t\t\t\t{props.colGroup}\r\n\t\t\t</colgroup>\r\n\t\t\t<thead className=\"h-table h-table-head\">\r\n\t\t\t\t<tr children={renderGridHeader(props)} />\r\n\t\t\t</thead>\r\n\t\t</table>\r\n\t</div>;\r\n}\r\n\r\nconst renderGridHeader = (props: GridHeaderProps): React.ReactNode => {\r\n\treturn props.columns.map((cell,index) => <th key={cell.field + index}>{cell.label}</th>);\r\n}\r\n","import * as React from \"react\";\r\nimport { IDataTableColumn, RendererArgs } from \"./Grid\";\r\n\r\nexport interface GridBodyProps {\r\n\tcolGroup: Array<React.ReactNode>;\r\n\tcolumns: Array<IDataTableColumn>;\r\n\tdata: Array<any>;\r\n}\r\n\r\nexport const GridBody = (props: GridBodyProps): JSX.Element => {\r\n\tif (!props.data || props.data && props.data.length === 0) {\r\n\t\treturn renderNoDataRow();\r\n\t}\r\n\r\n\treturn <div className=\"h-table h-table-body-container\">\r\n\t\t<table>\r\n\t\t\t<colgroup>\r\n\t\t\t\t{props.colGroup}\r\n\t\t\t</colgroup>\r\n\t\t\t<tbody className=\"h-table h-table-body\">\r\n\t\t\t\t{\r\n\t\t\t\t\t!props.data\r\n\t\t\t\t\t\t|| props.data && props.data.length === 0\r\n\t\t\t\t\t\t? renderNoDataRow()\r\n\t\t\t\t\t\t: renderGridRow(props)\r\n\t\t\t\t}\r\n\t\t\t</tbody>\r\n\t\t</table>\r\n\t</div>;\r\n}\r\n\r\nconst renderGridRow = (props: GridBodyProps): React.ReactNode => {\r\n\treturn props.data.map((row, index) => <tr key={index}>{renderGridCell(props, row)}</tr>);\r\n}\r\n\r\nconst renderGridCell = (props: GridBodyProps, row: any): React.ReactNode => {\r\n\treturn props.columns.map((column, index) => {\r\n\t\tif (!column.renderer) {\r\n\t\t\treturn <td key={column.field + index}>\r\n\t\t\t\t<span>\r\n\t\t\t\t\t{getRowCellValue(column, row)}\r\n\t\t\t\t</span>\r\n\t\t\t</td>;\r\n\t\t}\r\n\t\treturn <td>{column.renderer({ item: row } as RendererArgs)}</td>;\r\n\t});\r\n}\r\n\r\nconst getRowCellValue = (column: IDataTableColumn, row: any): string => {\r\n\tconst segments = column && column.field.split(\".\");\r\n\tif (segments) {\r\n\t\tlet value = row;\r\n\t\tsegments.forEach(x => {\r\n\t\t\tvalue = value[x];\r\n\t\t});\r\n\t\treturn value;\r\n\t}\r\n\treturn row[column.field];\r\n}\r\n\r\n//TRANSLATION\r\nconst renderNoDataRow = () => {\r\n\treturn <tr className=\"h-table h-table-row h-table-row-empty\">\r\n\t\tNO DATA\r\n\t</tr>\r\n}\r\n","import * as React from \"react\";\r\nimport { ComponentBaseProps, ComponentBaseState, ComponentBase } from \"../../ComponentBase\";\r\nimport { GridHeader } from \"./GridHeader\";\r\nimport { GridBody } from \"./GridBody\";\r\n\r\nexport interface RendererArgs {\r\n\titem: any;\r\n}\r\n\r\nexport interface IDataTableColumn {\r\n\tfield: string;\r\n\tlabel: string;\r\n\trenderer?: (args: RendererArgs) => React.ReactNode;\r\n}\r\n\r\nexport interface GridProps extends ComponentBaseProps {\r\n\tcolumns: Array<IDataTableColumn>;\r\n\tdata: Array<any>;\r\n}\r\n\r\nexport interface GridState extends ComponentBaseState {\r\n\tcolGroup: Array<React.ReactNode>;\r\n}\r\n\r\nexport class Grid extends ComponentBase<GridProps, GridState> {\r\n\r\n\tpublic componentDidMount(): void {\r\n\t\tconst colGroup = this.renderColGroup();\r\n\t\tthis.updateState({\r\n\t\t\tcolGroup\r\n\t\t});\r\n\t}\r\n\r\n\tprivate renderColGroup(): Array<React.ReactNode> {\r\n\t\treturn this.props.columns.map(x => <col width={`${100 / this.props.columns.length}%`}></col>)\r\n\t}\r\n\r\n\trender(): JSX.Element {\r\n\t\treturn <div className=\"h-table\">\r\n\t\t\t<GridHeader columns={this.props.columns}\r\n\t\t\t\tcolGroup={this.state.colGroup} />\r\n\t\t\t<GridBody columns={this.props.columns}\r\n\t\t\t\tcolGroup={this.state.colGroup}\r\n\t\t\t\tdata={this.props.data}\r\n\t\t\t/>\r\n\t\t</div>;\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport { ListBaseProps, ListBaseState, ListBase } from \"../ListBase\";\r\nimport * as Types from \"../../types/Types\";\r\nimport { IDataTableColumn, RendererArgs } from \"../shared/Grid/Grid\";\r\nimport * as Routes from \"../../routes\";\r\n\r\nexport interface MarketplaceListProps extends ListBaseProps<Types.Loan> {\r\n}\r\n\r\nexport interface MarketplaceListState extends ListBaseState<Types.Loan> {\r\n\r\n}\r\n\r\nexport class MarketplaceList extends ListBase<MarketplaceListProps, MarketplaceListState, Types.Loan> {\r\n\tprotected getColumns(): Array<IDataTableColumn> {\r\n\t\treturn [\r\n\t\t\t{\r\n\t\t\t\tlabel: \"Action\",\r\n\t\t\t\tfield: \"\",\r\n\t\t\t\trenderer: (args: RendererArgs) => {\r\n\t\t\t\t\treturn this.renderActionColumn(args.item)\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tlabel: \"name\",\r\n\t\t\t\tfield: \"name\",\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tlabel: \"story\",\r\n\t\t\t\tfield: \"story\"\r\n\t\t\t}\r\n\t\t];\r\n\t}\r\n\r\n\tprotected getDetailUrl(id: number): string {\r\n\t\treturn Routes.getMarketDetailUrl(id);\r\n\t}\r\n\r\n\tprotected renderActionColumn(item: Types.Loan): React.ReactNode {\r\n\t\treturn <button onClick={() => this.goToDetail(item.id)}>detail</button>\r\n\t}\r\n\r\n\tprotected controllerApi(): string {\r\n\t\treturn \"loans\";\r\n\t}\r\n\r\n\tprotected controllerPath(): string {\r\n\t\treturn \"marketplace\";\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport { ComponentBaseProps, ComponentBaseState, ComponentBase } from \"./ComponentBase\";\r\nimport { ApplicationCore } from \"../ApplicationCore\";\r\nimport { Grid, IDataTableColumn } from \"./shared/Grid/Grid\";\r\nimport { History } from \"history\";\r\n\r\nexport interface ListBaseProps<TEntity> extends ComponentBaseProps {\r\n\thistory: History;\r\n}\r\n\r\nexport interface ListBaseState<TEntity> extends ComponentBaseState {\r\n\tdata: Array<TEntity>;\r\n\tcolumns: Array<IDataTableColumn>;\r\n}\r\n\r\nexport class ListBase<\r\n\tTProps extends ListBaseProps<TEntity>,\r\n\tTState extends ListBaseState<TEntity>,\r\n\tTEntity\r\n\t> extends ComponentBase<TProps, TState> {\r\n\r\n\tprotected buildState(): ListBaseState<TEntity> {\r\n\t\treturn {\r\n\t\t\t...super.buildState(),\r\n\t\t\tdata: new Array<TEntity>(),\r\n\t\t\tcolumns: new Array<IDataTableColumn>(),\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected getDetailUrl(id: number): string {\r\n\t\tthrow new Error(\"getDetailUrl function is not implemented\");\r\n\t}\r\n\r\n\tprotected goToDetail = (id: number): void => {\r\n\t\tthis.props.history.push(this.getDetailUrl(id));\r\n\t\t//ApplicationCore.history.push(this.getDetailUrl(id))\r\n\t}\r\n\r\n\tprotected getColumns(): Array<IDataTableColumn> {\r\n\t\tthrow new Error(\"getColumns function is not implemented\");\r\n\t}\r\n\r\n\tprotected controllerApi(): string {\r\n\t\tthrow new Error(\"controllerApi function is not implemented\");\r\n\t}\r\n\r\n\tprotected controllerPath(): string {\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\tpublic componentDidMount() {\r\n\t\tApplicationCore.dataService.read(this.controllerApi(), this.controllerPath())\r\n\t\t\t.then(data => this.updateState({ data }))\r\n\t\t\t.catch(error => console.log(error));\r\n\t}\r\n\r\n\tprotected renderBody(): React.ReactNode {\r\n\t\treturn <Grid data={this.state.data}\r\n\t\t\tcolumns={this.getColumns()} />\r\n\t}\r\n\r\n\tpublic render(): React.ReactNode {\r\n\t\treturn this.renderBody();\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport { IRoutingParams, ViewBase, ViewBaseProps, ViewBaseState } from \"../ViewBase\";\r\nimport { MarketplaceList } from \"../marketplace/marketplaceList\";\r\nimport { History } from \"history\";\r\n\r\nexport interface MarketplaceListViewProps extends ViewBaseProps {\r\n\thistory: History;\r\n}\r\n\r\nexport interface MarketplaceListRoutingParams extends IRoutingParams {\r\n\r\n}\r\n\r\nexport interface MarketplaceListViewState extends ViewBaseState {\r\n\r\n}\r\n\r\nexport class MarketplaceListView extends ViewBase<MarketplaceListViewProps, MarketplaceListViewState, MarketplaceListRoutingParams> {\r\n\r\n\tprotected renderBody(): React.ReactNode {\r\n\t\tdebugger;\r\n\t\treturn <MarketplaceList history={this.props.history} />;\r\n\t}\r\n\r\n\tpublic render(): React.ReactNode {\r\n\t\treturn this.renderBody();\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport { DetailBaseProps, DetailBaseState, DetailBase } from \"../DetailBase\";\r\nimport * as Types from \"../../types/Types\";\r\nimport { IDataTableColumn, RendererArgs } from \"../shared/Grid/Grid\";\r\n\r\nexport interface MarketplaceDetailProps extends DetailBaseProps<Types.Loan> {\r\n\r\n}\r\n\r\nexport interface MarketplaceDetailState extends DetailBaseState<Types.Loan> {\r\n\r\n}\r\n\r\nexport class MarketplaceDetail extends DetailBase<MarketplaceDetailProps, MarketplaceDetailState, Types.Loan> {\r\n\r\n\tprotected controllerApi(): string {\r\n\t\treturn \"loans\";\r\n\t}\r\n\r\n\tprotected controllerPath(): string {\r\n\t\treturn \"marketplace\";\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport { ComponentBaseProps, ComponentBaseState, ComponentBase } from \"./ComponentBase\";\r\nimport { ApplicationCore } from \"../ApplicationCore\";\r\nimport { Grid, IDataTableColumn } from \"./shared/Grid/Grid\";\r\n\r\nexport interface DetailBaseProps<TEntity> extends ComponentBaseProps {\r\n\tid: number;\r\n}\r\n\r\nexport interface DetailBaseState<TEntity> extends ComponentBaseState {\r\n\tdetail: TEntity;\r\n\tcolumns: Array<IDataTableColumn>;\r\n}\r\n\r\nexport class DetailBase<\r\n\tTProps extends DetailBaseProps<TEntity>,\r\n\tTState extends DetailBaseState<TEntity>,\r\n\tTEntity\r\n\t> extends ComponentBase<TProps, TState> {\r\n\r\n\tprotected buildState(): DetailBaseState<TEntity> {\r\n\t\treturn {\r\n\t\t\t...super.buildState(),\r\n\t\t\tdetail: {} as TEntity,\r\n\t\t\tcolumns: new Array<IDataTableColumn>(),\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected controllerApi(): string {\r\n\t\tthrow new Error(\"controllerApi function is not implemented\");\r\n\t}\r\n\r\n\tprotected controllerPath(): string {\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\tpublic componentDidMount() {\r\n\t\tApplicationCore.dataService.readDetail(this.controllerApi(), this.props.id, this.controllerPath())\r\n\t\t\t.then(data => this.updateState({ detail: data }))\r\n\t\t\t.catch(error => console.log(error));\r\n\t}\r\n\r\n\tprotected renderBody(): React.ReactNode {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tpublic render(): React.ReactNode {\r\n\t\treturn this.renderBody();\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport { IRoutingParams, ViewBase, ViewBaseProps, ViewBaseState } from \"../ViewBase\";\r\nimport { MarketplaceDetail } from \"../marketplace/marketplaceDetail\";\r\n\r\nexport interface MarketplaceDetailViewProps extends ViewBaseProps {\r\n\r\n}\r\n\r\nexport interface MarketplaceDetailRoutingParams extends IRoutingParams {\r\n\tid: number\r\n}\r\n\r\nexport interface MarketplaceDetailViewState extends ViewBaseState {\r\n\r\n}\r\n\r\nexport class MarketplaceDetailView extends ViewBase<MarketplaceDetailViewProps, MarketplaceDetailViewState, MarketplaceDetailRoutingParams> {\r\n\r\n\tprotected renderBody(): React.ReactNode {\r\n\r\n\t\treturn <MarketplaceDetail id={this.parameters.id} />;\r\n\t}\r\n\r\n\tpublic render(): React.ReactNode {\r\n\t\tdebugger;\r\n\t\treturn this.renderBody();\r\n\t}\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Layout } from './components/Layout';\r\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\r\nimport { MarketplaceListView } from './components/Views/MarketplaceListView';\r\nimport { MarketplaceDetailView } from './components/Views/MarketplaceDetailView';\r\n\r\nexport const routePath: {\r\n\tmarketplaceDetail: string;\r\n\tmarketplaceList: string;\r\n} = {\r\n\tmarketplaceDetail: \"marketplace/:id\",\r\n\tmarketplaceList: \"marketplace\"\r\n}\n\nReactDOM.render(<Layout>\r\n\t<BrowserRouter>\r\n\t\t<Switch>\r\n\t\t\t<Route exact path={routePath.marketplaceList} component={MarketplaceListView} />\r\n\t\t\t<Route exact path={routePath.marketplaceDetail} component={MarketplaceDetailView} />\r\n\t\t\t<Redirect to={routePath.marketplaceList} />\r\n\t\t</Switch>\r\n\t</BrowserRouter>\r\n</Layout>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}